name: tests
on:
  push:
    branches:
      - stable
      - dev
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: psf/black@stable
        with:
          options: "--check"
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          pip install flake8
      - name: flake8
        run: |
          flake8
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      # if one python version fails, let the others finish
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Run tests
        run: |
          poetry run pytest --exitfirst --reruns 2 -o timeout_func_only=true --timeout 1200 --disable-warnings --log-cli-level=INFO --cov-config=bbot/test/coverage.cfg --cov-report xml:cov.xml --cov=bbot .
      - name: Upload Code Coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./cov.xml
          verbose: true
  test-distros:
    needs: lint
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu:20.04", "ubuntu:22.04", "ubuntu:24.04", "debian", "archlinux", "fedora", "gentoo/python", "python:3.10-alpine"]
    steps:
      - uses: actions/checkout@v4
      - name: Install Python and Poetry
        run: |
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            if [ "$ID" = "ubuntu" ] && [ "$VERSION_ID" = "20.04" ]; then
              # Add deadsnakes PPA for Python 3.12
              apt-get update
              apt-get install -y software-properties-common
              add-apt-repository ppa:deadsnakes/ppa
              apt-get update
              apt-get install -y python3.12 python3.12-venv python3.12-distutils python3-pip
              # Update alternatives to use python3.12
              update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 1
              update-alternatives --set python3 /usr/bin/python3.12
              python3 -m pip install --upgrade pip
              python3 -m pip install pipx
            else
              apt-get update
              apt-get install -y python3 python3-pip pipx
            fi
          elif [ -f /etc/arch-release ]; then
            pacman -Syu --noconfirm python python-pip pipx
          elif [ -f /etc/fedora-release ]; then
            dnf install -y python3 python3-pip pipx
          elif [ -f /etc/gentoo-release ]; then
            # Initialize and sync Gentoo repository
            emerge-webrsync
            emerge --sync
            emerge --update --newuse dev-lang/python dev-python/pipx
          elif [ -f /etc/alpine-release ]; then
            apk add --no-cache python3 py3-pip
            python3 -m pip install --upgrade pip
            python3 -m pip install pipx
          fi
          # Add $HOME/.local/bin to PATH
          export PATH="$HOME/.local/bin:$PATH"
          python3 -m pipx ensurepath
          pipx install poetry
      - name: Install dependencies
        run: |
          poetry install
      - name: Run tests
        run: |
          poetry run pytest --reruns 2 -o timeout_func_only=true --timeout 1200 --disable-warnings --log-cli-level=DEBUG .
  publish_code:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/stable')
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry build
          poetry self add "poetry-dynamic-versioning[plugin]"
      - name: Build Pypi package
        if: github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/dev'
        run: python -m build
      - name: Publish Pypi package
        if: github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/dev'
        uses: pypa/gh-action-pypi-publish@release/v1.5
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
      - name: Get BBOT version
        id: version
        run: echo "BBOT_VERSION=$(poetry version | cut -d' ' -f2)" >> $GITHUB_OUTPUT
      - name: Publish to Docker Hub (dev)
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: blacklanternsecurity/bbot
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: "latest,dev,${{ steps.version.outputs.BBOT_VERSION }}"
      - name: Publish to Docker Hub (stable)
        if: github.event_name == 'push' && github.ref == 'refs/heads/stable'
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: blacklanternsecurity/bbot
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tags: "stable,${{ steps.version.outputs.BBOT_VERSION }}"
      - name: Docker Hub Description
        if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: blacklanternsecurity/bbot
    outputs:
      BBOT_VERSION: ${{ steps.version.outputs.BBOT_VERSION }}
  # tag_commit:
  #   needs: publish_code
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/stable'
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: ${{ github.head_ref }}
  #         fetch-depth: 0 # Fetch all history for all tags and branches
  #     - name: Configure git
  #       run: |
  #         git config --local user.email "info@blacklanternsecurity.com"
  #         git config --local user.name "GitHub Actions"
  #     - name: Tag commit
  #       run: |
  #         VERSION="${{ needs.publish_code.outputs.BBOT_VERSION }}"
  #         if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
  #           TAG_MESSAGE="Dev Release $VERSION"
  #         elif [[ "${{ github.ref }}" == "refs/heads/stable" ]]; then
  #           TAG_MESSAGE="Stable Release $VERSION"
  #         fi
  #         git tag -a $VERSION -m "$TAG_MESSAGE"
  #         git push origin --tags
